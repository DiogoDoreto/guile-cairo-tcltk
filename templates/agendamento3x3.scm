(define-module (templates agendamento3x3)
  #:use-module (oop goops)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-19)
  #:use-module (cairo)
  #:use-module (lib cairo)
  #:use-module (lib date)
  #:use-module (store colors)
  #:export (agendamento3x3))

(define margin (mm-to-points 10))

(define (set-source-header-bg cr)
  (apply cairo-set-source-rgb cr (get-color-rgb 'header-bg)))

(define (set-source-header-text cr)
  (apply cairo-set-source-rgb cr (get-color-rgb 'header-fg)))

(define (set-source-altrow-bg cr)
  (apply cairo-set-source-rgb cr (get-color-rgb 'alt-header-bg)))

(define (set-source-altrow-text cr)
  (apply cairo-set-source-rgb cr (get-color-rgb 'alt-header-fg)))

(define (set-line-width-table cr)
  (cairo-set-line-width cr 0.5))

(define (set-source-table-border cr)
  (apply cairo-set-source-rgb cr (get-color-rgb 'border)))

(define (date->page-side date)
  (if (any (λ (wd) (wd date)) (list monday? tuesday? wednesday?))
      'left
      'right))

(define (render-time-rows table col)
  (set-source-header-text (get-cairo table))
  (for-each (lambda (r)
              (let* ((hour (string-pad (number->string (+ r 8)) 2 #\0))
                     (time (string-append hour ":00"))
                     (row (1+ (* r 3)))
                     (area (cell-area table row col 1 1)))
                (show-text-centered area time)))
            (iota 10)))

(define* (render-table-column table col text #:key (day #f) (times #f) (colspan 1))
  (let ((cr (get-cairo table)))
    ;; header
    (set-source-header-bg cr)
    (area-to-rectangle (cell-area table 0 col 1 colspan))
    (cairo-fill cr)
    ;; alternating rows bg
    (set-source-altrow-bg cr)
    (let loop ((row 1))
      (when (< row (rows table))
        (area-to-rectangle (cell-area table row col 1 colspan))
        (cairo-fill cr)
        (loop (+ row 3))))
    ;; borders
    (set-line-width-table cr)
    (set-source-table-border cr)
    (for-each (lambda (row)
                (area-to-rectangle (cell-area table row col 1 colspan))
                (cairo-stroke cr))
              (iota (rows table)))
    (set-source-header-text cr)
    (let ((cell (cell-inner-area table 0 col 1 colspan)))
      (show-text-centered cell text)
      (when day (show-text-right cell (number->string day))))
    (set-source-altrow-text cr)
    (when times (render-time-rows table col))))

(define (week-day-name date)
  (case (date-week-day date)
    ((1) "Segunda")
    ((2) "Terça")
    ((3) "Quarta")
    ((4) "Quinta")
    ((5) "Sexta")))

(define (render-observacoes table col colspan)
  (render-table-column table col "Observações" #:colspan colspan))

(define (make-tmpl-table cr page)
  (make <cairo-table> #:cairo cr
        #:rows 31 #:columns 3
        #:x margin #:y margin
        #:width (- (width page) (* 2 margin))
        #:height (- (height page) (* 2 margin))
        #:cell-padding-x (mm-to-points 1)))

(define* (agendamento3x3 cr #:key page from to)
  (define table (make-tmpl-table cr page))
  (define get-next-date (day-generator from to))
  (define first-date (get-next-date))
  (define prev-month (date-month first-date))
  (define prev-page-side 'right)
  (let loop ((date-lst (filter business-day? (date->list from to))))
    (when (not (nil? date-lst))
      (define date (car date-lst))
      (define month (date-month date))
      (when (not (= prev-month month))
        (set! prev-month month)
        (set! prev-page-side 'right)
        (cairo-show-page cr))
      (define page-side (date->page-side date))
      (when (not (eq? page-side prev-page-side))
        (set! prev-page-side page-side)
        (cairo-show-page cr))
      (define col (- (date-week-day date) (if (eq? 'left page-side) 1 4)))
      (render-table-column table col (week-day-name date) #:day (date-day date) #:times #t)
      (when (friday? date)
        (render-observacoes table 2 1))
      (define next-date (and (not (nil? (cdr date-lst))) (cadr date-lst)))
      (when (or (not next-date) (not (= month (date-month next-date))))
        (cond ((thursday? date) (render-observacoes table 1 2))
              ((eq? 'left page-side)
               (cairo-show-page cr)
               (render-observacoes table 0 3)))
        (cairo-show-page cr))
      (loop (cdr date-lst)))))
